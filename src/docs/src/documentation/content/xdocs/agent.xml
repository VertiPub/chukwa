<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Chukwa Agent Setup Guide</title>
  </header>
  <body>

<section>
<title>Overview</title>
<p>In a normal Chukwa installation, an <em>Agent</em> process runs on every 
machine being monitored. This process is responsible for all the data collection
on that host.  Data collection might mean periodically running a Unix command,
or tailing a file, or listening for incoming UDP packets.</p>

<p>Each particular data source corresponds to a so-called <em>Adaptor</em>. 
Adaptors are dynamically loadable modules that run inside the Agent process. 
There is generally one Adaptor for each data source: for each file being watched 
or for each Unix command being executed. Each adaptor has a unique name. If you 
do not specify a name, one will be auto-generated by hashing the Adaptor type and
parameters.</p>

<p>There are a number of Adaptors built into Chukwa, and you can also develop
your own. Chukwa will use them if you add them to the Chukwa library search path
 (e.g., by putting them in a jarfile in <code>$CHUKWA_HOME/lib</code>.)</p>
</section>



<section>
<title>Agent Control</title>

<p>Once an Agent process is running, there are a number of commands that you can
 use to inspect and control it.  By default, Agents listen for incoming commands
  on port 9093. Commands are case-insensitive</p>

<table>
<tr><td>Command</td><td>Purpose</td><td>Options</td></tr>

<tr><td><code>add</code>   </td><td> Start an adaptor.</td>  <td>See below</td></tr>
<tr><td><code>close</code> </td><td> Close socket connection to agent.</td><td>None</td></tr>
<tr><td><code>help</code>  </td><td> Display a list of available commands</td><td>None</td></tr>
<tr><td><code>list</code>  </td><td> List currently running adaptors</td><td>None</td></tr>
<tr><td><code>reloadcollectors</code>  </td><td> Re-read list of collectors</td><td>None</td></tr>
<tr><td><code>stop</code>  </td><td> Stop adaptor, abruptly</td><td>Adaptor name</td></tr>
<tr><td><code>stopall</code>  </td><td> Stop all adaptors, abruptly</td><td>Adaptor name</td></tr>
<tr><td><code>shutdown</code>  </td><td> Stop adaptor, gracefully</td><td>Adaptor name</td></tr>
<tr><td><code>stopagent</code>  </td><td> Stop agent process</td><td>None</td></tr>
</table>


<p>The add command is by far the most complex; it takes several mandatory and 
optional parameters. The general form is as follows:</p>
<source>
add [name =] &#60;adaptor_class_name&#62; &#60;datatype&#62; &#60;adaptor 
specific params&#62; &#60;initial offset&#62;. 
</source>

<p>
There are four mandatory fields: The word <code>add</code>, the class name for 
the Adaptor, the datatype of the Adaptor's output, and the sequence number for 
the first byte.  There are two optional fields; the adaptor instance name, and 
the adaptor parameters.
</p>

<p>The adaptor name, if specified, should go after the add command, and be 
followed with an equals sign. It should be a string of printable characters, 
without whitespace or '='.  Chukwa Adaptor names all start with "adaptor_".
If you specify an adaptor name which does not start with that prefix, it will
be added automatically.  
</p>

<p>Adaptor parameters aren't required by the Chukwa agent, but each class of adaptor 
may itself specify both mandatory and optional parameters. See below.</p>
</section>

<section>
<title>Command-line options</title>
<p>Normally, agents are configured via the file <code>conf/chukwa-agent-conf.xml.</code>
However, there are a few command-line options that are sometimes useful in
troubleshooting. If you specify "local" as an option, then the agent will print
chunks to standard out, rather than to a collector. If you specify a URI, then
that will be used as collector, overriding the collectors specified in
<code>conf/collectors</code>.  These options are intended for testing and debugging,
not for production use.</p>

<source>
bin/chukwa agent local
</source>
</section>

<section> 
<title>Adaptors</title>
<p>This section lists the standard adaptors, and the arguments they take.</p>

<ul>
<li><strong>FileAdaptor</strong>: Pushes a whole file, as one Chunk, then exits.
 Takes one mandatory parameter; the file to push.

<source>add FileTailer FooData /tmp/foo 0</source>
This pushes file <code>/tmp/foo</code> as one chunk, with datatype <code>FooData</code>.
</li>
<li><strong>filetailer.LWFTAdaptor</strong>
Repeatedly tails a file, treating the file as a sequence of bytes, ignoring the
  content. Chunk boundaries are arbitrary. This is useful for streaming binary 
  data. Takes one mandatory parameter; a path to the file to tail. If log file
  is rotated while there is unread data, this adaptor will not attempt to recover it.
  <source>add filetailer.LWFTAdaptor BarData /foo/bar 0</source>
This pushes <code>/foo/bar</code> in a sequence of Chunks of type <code>BarData</code>
</li>

<li><strong>filetailer.FileTailingAdaptor</strong>
 Repeatedly tails a file, again ignoring content and with unspecified Chunk
 boundaries. Takes one mandatory parameter; a path to the file to tail. Keeps a 
  file handle open in order to detect log file rotation.
<source>add filetailer.FileTailingAdaptor BarData /foo/bar 0</source>
This pushes <code>/foo/bar</code> in a sequence of Chunks of type <code>BarData</code>
</li>


<li><strong>filetailer.RCheckFTAdaptor</strong>
 An experimental modification of the above, which avoids the need to keep a file handle
 open.  Same parameters and usage as the above.
</li>

<li><strong>filetailer.CharFileTailingAdaptorUTF8</strong>
The same as the base FileTailingAdaptor, except that chunks are guaranteed to end only at carriage returns.
 This is useful for most ASCII log file formats.
</li>

<li><strong>filetailer.CharFileTailingAdaptorUTF8NewLineEscaped</strong>
 The same, except that chunks are guaranteed to end only at non-escaped carriage
 returns. This is useful for pushing Chukwa-formatted log files, where exception
 stack traces stay in a single chunk.
</li>

<li><strong>DirTailingAdaptor</strong> Takes a directory path and an
 adaptor name as mandatory parameters; repeatedly scans that directory and all
 subdirectories, and starts the indicated adaptor running on each file. Since
 the DirTailingAdaptor does not, itself, emit data, the datatype parameter is 
 applied to the newly-spawned adaptors.  Note  that if you try this on a large 
 directory with an adaptor that keeps file handles open,
  it is possible to exceed your system's limit on open files.
  A file pattern can be specified as an optional second parameter.

<source>add DirTailingAdaptor logs /var/log/ *.log filetailer.CharFileTailingAdaptorUTF8 0</source>

</li>
<li><strong>ExecAdaptor</strong> Takes a frequency (in milliseconds) as optional 
parameter, and then program name as mandatory parameter. Runs that program 
repeatedly at a rate specified by frequency.

<source>add ExecAdaptor Df 60000 /bin/df -x nfs -x none 0</source>
 This adaptor will run <code>df</code> every minute, labeling output as Df.
</li>

<li><strong>UDPAdaptor</strong> Takes a port number as mandatory parameter.
Binds to the indicated UDP port, and emits one Chunk for each received packet.

<source>add UdpAdaptor Packets 1234 0</source>
 This adaptor will listen for incoming traffic on port 1234, labeling output as Packets.
</li>


<li><strong>edu.berkeley.chukwa_xtrace.XtrAdaptor</strong> (available in <code>contrib</code>)
 Takes an <a href="http://www.x-trace.net/wiki/doku.php">Xtrace</a> ReportSource
 class name [without package] as mandatory argument, and no optional parameters.
 Listens for incoming reports in the same way as that ReportSource would.

<source>add edu.berkeley.chukwa_xtrace.XtrAdaptor Xtrace UdpReportSource 0</source>
 This adaptor will create and start a <code>UdpReportSource</code>, labeling its
  output datatype as Xtrace.
</li>
</ul>

</section>
</body>
</document>